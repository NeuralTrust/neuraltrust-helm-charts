controlPlane:
  enabled: true
  secrets:
    controlPlaneJWTSecret: ""  # Define this value, or set it via --set or environment-specific values
    openaiApiKey: ""  # Define this value, or set it via --set or environment-specific values
    resendApiKey: ""  # Define this value, or set it via --set or environment-specific values
    resendAlertSender: ""  # Define this value, or set it via --set or environment-specific values
    resendInviteSender: ""  # Define this value, or set it via --set or environment-specific values
  components:
    scheduler:
      enabled: true
      service:
        type: LoadBalancer
      ingress:
        host: "control-plane-scheduler.test.neuraltrust.ai"
        enabled: true
        className: "nginx"  # Set to your ingress controller class (e.g., "nginx", "traefik", "haproxy")
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-issuer"
          nginx.ingress.kubernetes.io/ssl-redirect: "true"
          nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
          nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
          nginx.ingress.kubernetes.io/x-frame-options: "DENY"
          nginx.ingress.kubernetes.io/x-content-type-options: "nosniff"
          nginx.ingress.kubernetes.io/x-xss-protection: "1; mode=block"
          nginx.ingress.kubernetes.io/proxy-body-size: "50m"
          nginx.ingress.kubernetes.io/proxy-connect-timeout: "600"
          nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
          nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
          nginx.ingress.kubernetes.io/enable-cors: "true"
          nginx.ingress.kubernetes.io/cors-allow-origin: "https://*"
          nginx.ingress.kubernetes.io/cors-allow-methods: "PUT, GET, POST, OPTIONS, DELETE, PATCH"
          nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,token,Token,Content-Length,Accept,Origin,Token,token"
          nginx.ingress.kubernetes.io/proxy-buffer-size: "128k"
        tls:
          enabled: true
          secretName: ""  # Leave empty to auto-generate per-service secrets
      replicaCount: 1  # Standardized naming
      image:
        repository: "europe-west1-docker.pkg.dev/neuraltrust-app-prod/nt-docker/scheduler"
        tag: "latest"
        pullPolicy: "Always"
        imagePullSecrets:
          - name: gcr-secret
      env:
        dataPlaneApiUrl: ""  # Define this value, or set it via --set or environment-specific values
        dataPlaneApiVersion: v1
        dataPlaneJwtSecret: ""  # Define this value, or set it via --set or environment-specific values
      resources:
        requests:
          memory: 256Mi
          cpu: 100m
        limits:
          memory: 512Mi
          cpu: 200m
    api:
      enabled: true
      service:
        type: LoadBalancer
      ingress:
        host: "control-plane-api.test.neuraltrust.ai"
        enabled: true
        className: "nginx"  # Set to your ingress controller class (e.g., "nginx", "traefik", "haproxy")
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-issuer"
          nginx.ingress.kubernetes.io/ssl-redirect: "true"
          nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
          nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
          nginx.ingress.kubernetes.io/x-frame-options: "DENY"
          nginx.ingress.kubernetes.io/x-content-type-options: "nosniff"
          nginx.ingress.kubernetes.io/x-xss-protection: "1; mode=block"
          nginx.ingress.kubernetes.io/proxy-body-size: "50m"
          nginx.ingress.kubernetes.io/proxy-connect-timeout: "600"
          nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
          nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
          nginx.ingress.kubernetes.io/enable-cors: "true"
          nginx.ingress.kubernetes.io/cors-allow-origin: "https://*"
          nginx.ingress.kubernetes.io/cors-allow-methods: "PUT, GET, POST, OPTIONS, DELETE, PATCH"
          nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,token,Token,Content-Length,Accept,Origin,Token,token"
          nginx.ingress.kubernetes.io/proxy-buffer-size: "128k"
        tls:
          enabled: true
          secretName: ""  # Leave empty to auto-generate per-service secrets
      replicaCount: 2  # Standardized naming
      image:
        repository: "europe-west1-docker.pkg.dev/neuraltrust-app-prod/nt-docker/control-plane-api"
        tag: "latest"
        pullPolicy: "Always"
        imagePullSecrets:
          - name: gcr-secret
      host: ""
      secrets:
        controlPlaneJWTSecret: ""  # Define this value, or set it via --set or environment-specific values
      resources:
        requests:
          memory: 512Mi
          cpu: 250m
        limits:
          memory: 1Gi
          cpu: 500m
    app:
      enabled: true
      service:
        type: LoadBalancer
      ingress:
        host: "control-plane-app.test.neuraltrust.ai"
        secondaryHost: ""
        enabled: true
        className: "nginx"  # Set to your ingress controller class (e.g., "nginx", "traefik", "haproxy")
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-issuer"
          nginx.ingress.kubernetes.io/ssl-redirect: "true"
          nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
          nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
          nginx.ingress.kubernetes.io/x-frame-options: "DENY"
          nginx.ingress.kubernetes.io/x-content-type-options: "nosniff"
          nginx.ingress.kubernetes.io/x-xss-protection: "1; mode=block"
          nginx.ingress.kubernetes.io/proxy-body-size: "50m"
          nginx.ingress.kubernetes.io/proxy-connect-timeout: "600"
          nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
          nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
          nginx.ingress.kubernetes.io/enable-cors: "true"
          nginx.ingress.kubernetes.io/cors-allow-origin: "https://*"
          nginx.ingress.kubernetes.io/cors-allow-methods: "PUT, GET, POST, OPTIONS, DELETE, PATCH"
          nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,token,Token,Content-Length,Accept,Origin,Token,token"
          nginx.ingress.kubernetes.io/proxy-buffer-size: "128k"
        tls:
          enabled: true
          secretName: ""  # Leave empty to auto-generate per-service secrets
      replicaCount: 1
      image:
        repository: "europe-west1-docker.pkg.dev/neuraltrust-app-prod/nt-docker/app"
        tag: "latest"
        pullPolicy: "Always"
        imagePullSecrets:
          - name: gcr-secret
      config:
        nodeEnv: production
        port: 3000
        controlPlaneApiUrl: ""
        dataPlaneApiUrl: ""  # Define this value, or set it via --set or environment-specific values
        openaiModel: ""  # Define this value, or set it via --set or environment-specific values
      resources:
        requests:
          memory: 512Mi
          cpu: 250m
        limits:
          memory: 1Gi
          cpu: 500m
      initContainer:
        resources:
          requests:
            memory: 512Mi
            cpu: 250m
          limits:
            memory: 1Gi
            cpu: 500m
    postgresql:
      enabled: false  # Changed from ${global.postgresql.enabled}
      image:
        repository: "postgres"
        tag: "15-alpine"
        pullPolicy: "IfNotPresent"
        imagePullSecrets:
          - name: ""
      persistence:
        enabled: true
        size: 10Gi
        storageClass: ""
      secrets:
        name: "postgresql-secrets"
        user: "postgres"
        password: ""  # Define this value, or set it via --set or environment-specific values
        database: "neuraltrust"
        host: "postgresql"
        port: "5432"
      resources:
        requests:
          memory: 512Mi
          cpu: 250m
        limits:
          memory: 1Gi
          cpu: 500m
      service:
        type: ClusterIP
        port: 5432

dataPlane:
  enabled: true
  secrets:
    openaiApiKeySecretName: "openai-secrets" # Secret name for OpenAI key
    openaiApiKey: ""  # Define this value, or set it via --set or environment-specific values
    googleApiKeySecretName: "google-secrets" # Secret name for Google key
    googleApiKey: ""  # Define this value, or set it via --set or environment-specific values
    resendApiKeySecretName: "resend-secrets" # Secret name for Resend key
    resendApiKey: ""  # Define this value, or set it via --set or environment-specific values
    dataPlaneJWTSecretName: "data-plane-jwt-secret" # Secret name for Data Plane JWT
    dataPlaneJWTSecret: ""  # Define this value, or set it via --set or environment-specific values
    huggingFaceTokenSecretName: "huggingface-secrets" # Secret name for Hugging Face token
    huggingFaceToken: ""  # Define this value, or set it via --set or environment-specific values
  components:
    clickhouse:
      enabled: true
      backup:
        enabled: false
        type: "s3"  # s3 or gcs
        image:
          repository: "curlimages/curl"
          tag: "8.13.0"
        s3:
          bucket: ""  # Define this value, or set it via --set or environment-specific values
          region: ""  # Define this value, or set it via --set or environment-specific values
          accessKey: ""  # Define this value, or set it via --set or environment-specific values
          secretKey: ""  # Define this value, or set it via --set or environment-specific values
          endpoint: ""  # Optional, for custom S3-compatible endpoints
        gcs:
          bucket: ""  # Define this value, or set it via --set or environment-specific values
          accessKey: ""  # Define this value, or set it via --set or environment-specific values
          secretKey: ""  # Define this value, or set it via --set or environment-specific values
      auth:
        username: "neuraltrust"
      image:
        repository: "clickhouse/clickhouse-server"
        tag: "25.3.2"
        pullPolicy: "Always"
        imagePullSecrets:
          - name: ""
      # Connection configuration
      host: "clickhouse"
      port: "8123"
      user: "neuraltrust"
      database: "neuraltrust"
      # Configuration references
      secrets:
        name: "clickhouse-secrets"
      configmap:
        name: "clickhouse-init-job"
      resources:
        requests:
          memory: 512Mi
          cpu: 250m
        limits:
          memory: 1Gi
          cpu: 500m
    kafka:
      enabled: true
      connect:
        replicas: 1
        image: europe-west1-docker.pkg.dev/neuraltrust-app-dev/nt-docker/kafka-connect:latest
        imagePullSecrets:
          - name: ""
        resources:
          limits:
            cpu: "1"
            memory: 4Gi
          requests:
            cpu: 500m
            memory: 2Gi
      broker:
        replicas: 1
        imagePullSecrets:
          - name: ""
        resources:
          requests:
            memory: 1Gi
            cpu: 500m
          limits:
            memory: 2Gi
            cpu: 1
      ui:
        image: provectuslabs/kafka-ui:v0.7.2
        resources:
          limits:
            cpu: 200m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 256Mi
    api:
      enabled: true
      service:
        type: LoadBalancer
      ingress:
        enabled: true
        host: "data-plane-api.test.neuraltrust.ai" 
        className: "nginx"  # Set to your ingress controller class (e.g., "nginx", "traefik", "haproxy")
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-issuer"
          nginx.ingress.kubernetes.io/ssl-redirect: "true"
          nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
          nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
          nginx.ingress.kubernetes.io/x-frame-options: "DENY"
          nginx.ingress.kubernetes.io/x-content-type-options: "nosniff"
          nginx.ingress.kubernetes.io/x-xss-protection: "1; mode=block"
          nginx.ingress.kubernetes.io/proxy-body-size: "50m"
          nginx.ingress.kubernetes.io/proxy-connect-timeout: "600"
          nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
          nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
          nginx.ingress.kubernetes.io/enable-cors: "true"
          nginx.ingress.kubernetes.io/cors-allow-origin: "https://*"
          nginx.ingress.kubernetes.io/cors-allow-methods: "PUT, GET, POST, OPTIONS, DELETE, PATCH"
          nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,token,Token,Content-Length,Accept,Origin,Token,token"
        tls:
          enabled: true
          secretName: ""  # Leave empty to auto-generate per-service secrets
      classifierModel: "gpt"
      replicaCount: 2  # Standardized naming
      image:
        repository: europe-west1-docker.pkg.dev/neuraltrust-app-prod/nt-docker/data-plane-api
        tag: latest
        pullPolicy: Always
        imagePullSecrets:
          - name: gcr-secret
      accessMode: ReadWriteOnce
      huggingfaceToken: ""  # Define this value, or set it via --set or environment-specific values
      storage: 10Gi
      # TrustTest Configuration (.trusttest_config.json)
      trustTestConfig:
        evaluator:
          provider: "google"
          model: "gemini-2.0-flash"
          temperature: 0.2
        question_generator:
          provider: "google"
          model: "gemini-2.0-flash"
          temperature: 0.5
        embeddings:
          provider: "openai"
          model: "text-embedding-3-small"
        topic_summarizer:
          provider: "google"
          model: "gemini-2.0-flash"
          temperature: 0.2
      resources:
        requests:
          cpu: 200m
          memory: 512Mi
        limits:
          cpu: 400m
          memory: 1Gi
    worker:
      enabled: true
      replicas: 1
      image:
        repository: europe-west1-docker.pkg.dev/neuraltrust-app-prod/nt-docker/workers
        tag: latest
        pullPolicy: Always
        imagePullSecrets:
          - name: gcr-secret
      resources:
        requests:
          memory: 4Gi
          cpu: 1000m
        limits:
          memory: 8Gi
          cpu: 2000m
    connectorsJob: # New section for the create-connectors job
      image: curlimages/curl:8.13.0 # Default image for create-connectors job