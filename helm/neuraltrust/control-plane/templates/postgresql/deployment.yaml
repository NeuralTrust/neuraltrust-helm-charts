{{- if .Values.controlPlane.components.postgresql.installInCluster }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-postgresql
  labels:
    app: {{ .Release.Name }}-postgresql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-postgresql
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-postgresql
    spec:
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsGroup: 999
        runAsNonRoot: true
      imagePullSecrets:
        {{- toYaml .Values.controlPlane.components.postgresql.imagePullSecrets | nindent 10 }}
      containers:
      - name: postgresql
        image: "{{ .Values.controlPlane.components.postgresql.image.repository }}:{{ .Values.controlPlane.components.postgresql.image.tag }}"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          runAsNonRoot: true
          runAsUser: 999
          runAsGroup: 999
          seccompProfile:
            type: RuntimeDefault
        imagePullPolicy: {{ .Values.controlPlane.components.postgresql.image.pullPolicy }}
        ports:
        - containerPort: 5432
          name: postgresql
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgresql-secrets
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-secrets
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgresql-secrets
              key: POSTGRES_DB
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_HOST_AUTH_METHOD
          value: "md5"
        volumeMounts:
        - name: postgresql-data
          mountPath: /var/lib/postgresql/data
        resources:
            {{- toYaml .Values.controlPlane.components.postgresql.resources | nindent 12 }}
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "PGPASSWORD=$POSTGRES_PASSWORD pg_isready -h localhost -p 5432 -U $POSTGRES_USER"
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "PGPASSWORD=$POSTGRES_PASSWORD pg_isready -h localhost -p 5432 -U $POSTGRES_USER"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
      volumes:
      - name: postgresql-data
        {{- if .Values.controlPlane.components.postgresql.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-postgresql-pvc
        {{- else }}
        emptyDir: {}
        {{- end }}
{{- end }} 